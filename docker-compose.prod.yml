version: '3.8'

services:

#  traefik:
#    build: ./traefik
#    ports:
#      - '80:80'
#      - '8080:8080'
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#    networks:
#      - traefik-public
#
#  rabbitmq:
#    image: rabbitmq:3.11-management
#    ports:
#      # http management UI
#      - '15672:15672'
#      # AMQP protocol port
#      - '5672:5672'
#    environment:
#      - RABBITMQ_DEFAULT_USER=admin
#      - RABBITMQ_DEFAULT_PASS=admin
#    volumes:
#      - rabbitmq_data:/var/lib/rabbitmq

  neo4j-db:
    image: neo4j:4.4.6
    ports:
      # http management UI
      - '7474:7474'
      # bolt protocol port
      - '7687:7687'
    environment:
      - NEO4J_AUTH=neo4j/neo4j-db-pass
    volumes:
      - neo4j_data:/data

  graph-service:
    build: ./graph_service
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    ports:
      # http port
      - '8000:8000'
    environment:
      - NEO4J_URI=neo4j://neo4j-db:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=neo4j-db-pass
      - NEO4J_DATABASE=neo4j
    depends_on:
      - neo4j-db

  #  auth-service:
#    build: ./auth_service
#    command: bash -c 'while !</dev/tcp/auth-service-db/5432; do sleep 1; done; uvicorn main:app --host 0.0.0.0'
#    expose:
#      - 8000
#    environment:
#      - DATABASE_URL=postgres://postgres_user:postgress_password@auth-service-db:5432/auth
#      - SECRET_KEY=''
#    networks:
#      - traefik-public
#    labels:
#      - traefik.enable=true
#      - traefik.http.routers.auth-service.rule=Host(`auth-service.localhost`)
#      - traefik.docker.network=traefik-public
#    - traefik.http.middlewares.api-forwardauth.forwardauth.address=http://auth-service:8000/auth
#    - traefik.http.middlewares.api-forwardauth.forwardauth.trustForwardHeader=true
#    - traefik.http.middlewares.api-forwardauth.forwardauth.authRequestHeaders=Cookie
#    - traefik.http.middlewares.api-forwardauth.forwardauth.authResponseHeaders=Authorization
#    depends_on:
#      - traefik
#      - auth-service-db

#  frontend:
#    build: ./frontend
#    volumes:
#      - './frontend:/app'
#      - '/app/node_modules'
#    labels:
#      - traefik.enable=true
#      - traefik.http.routers.frontend.rule=PathPrefix(`/`)
#      - traefik.http.services.frontend.loadbalancer.server.port=8080
#    depends_on:
#      - traefik
#    networks:
#      - traefik-public

#  auth-service-db:
#    image: postgres:13-alpine
#    expose:
#      - 5432
#    environment:
#      - POSTGRES_USER=postgres_user
#      - POSTGRES_PASSWORD=postgress_password
#      - POSTGRES_DB=auth
#    volumes:
#      - postgres_data:/var/lib/postgresql/data/


#  api-example:
#    image: mettan-dev/api-example:latest
#    restart: unless-stopped
#    networks:
#      - stack-network
#    depends_on:
#      - "reverse-proxy"
#    labels:
#    - traefik.http.routers.api-example.rule=Host(`api.demo.com`)
#    - traefik.http.routers.api-example.middlewares=api-forwardauth@docker
#    - traefik.http.services.api-example.loadbalancer.server.port=3001
#    - traefik.docker.network=stack-network
#
#  spa-example:
#    image: mettan-dev/spa-example:latest
#    restart: unless-stopped
#    networks:
#      - stack-network
#    depends_on:
#      - "reverse-proxy"
#    labels:
#    - traefik.http.routers.spa-example.rule=Host(`demo.com`)
#    - traefik.http.services.spa-example.loadbalancer.server.port=8080
#    - traefik.docker.network=stack-network

#networks:
#  traefik-public:
#    external: true

volumes:
  postgres_data:
  rabbitmq_data:
  neo4j_data: